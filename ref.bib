@inproceedings{Hughes2007,
  abstract  = {One of the nice things about purely functional languages is that functions often satisfy simple properties, and enjoy simple algebraic relationships. Indeed, if the functions of an API satisfy elegant laws, that in itself is a sign of a good design---the laws not only indicate conceptual simplicity, but are useful in practice for simplifying programs that use the API, by equational reasoning or otherwise.},
  address   = {Berlin, Heidelberg},
  author    = {Hughes, John},
  booktitle = {Practical Aspects of Declarative Languages},
  editor    = {Hanus, Michael},
  isbn      = {978-3-540-69611-7},
  pages     = {1--32},
  publisher = {Springer Berlin Heidelberg},
  title     = {QuickCheck Testing for Fun and Profit},
  year      = {2007},
}

@inbook{Hughes2016,
  abstract  = {This is not a typical scientific paper. It does not present a new method, with careful experiments to evaluate it, and detailed references to related work. Rather, it recounts some of my experiences over the last 15 years, working with QuickCheck, and its purpose is as much to entertain as to inform.},
  address   = {Cham},
  author    = {Hughes, John},
  booktitle = {A List of Successes That Can Change the World: Essays Dedicated to Philip Wadler on the Occasion of His 60th Birthday},
  doi       = {10.1007/978-3-319-30936-1_9},
  editor    = {Lindley, Sam
and McBride, Conor
and Trinder, Phil
and Sannella, Don},
  isbn      = {978-3-319-30936-1},
  pages     = {169--186},
  publisher = {Springer International Publishing},
  title     = {Experiences with QuickCheck: Testing the Hard Stuff and Staying Sane},
  url       = {https://doi.org/10.1007/978-3-319-30936-1_9},
  year      = {2016},
}

@inproceedings{li2021modelbased,
      title={Model-Based Testing of Networked Applications},
      author={Yishuai Li and Benjamin C. Pierce and Steve Zdancewic},
      year={2021},
      booktitle={ACM SIGSOFT International Symposium on Software Testing and Analysis}
}

@article {deepspec,
	author = {Appel, Andrew W. and Beringer, Lennart and Chlipala, Adam and Pierce, Benjamin C. and Shao, Zhong and Weirich, Stephanie and Zdancewic, Steve},
	title = {Position paper: the science of deep specification},
	volume = {375},
	number = {2104},
	year = {2017},
	doi = {10.1098/rsta.2016.0331},
	publisher = {The Royal Society},
	abstract = {We introduce our efforts within the project {\textquoteleft}The science of deep specification{\textquoteright} to work out the key formal underpinnings of industrial-scale formal specifications of software and hardware components, anticipating a world where large verified systems are routinely built out of smaller verified components that are also used by many other projects. We identify an important class of specification that has already been used in a few experiments that connect strong component-correctness theorems across the work of different teams. To help popularize the unique advantages of that style, we dub it deep specification, and we say that it encompasses specifications that are rich, two-sided, formal and live (terms that we define in the article). Our core team is developing a proof-of-concept system (based on the Coq proof assistant) whose specification and verification work is divided across largely decoupled subteams at our four institutions, encompassing hardware microarchitecture, compilers, operating systems and applications, along with cross-cutting principles and tools for effective specification. We also aim to catalyse interest in the approach, not just by basic researchers but also by users in industry.This article is part of the themed issue {\textquoteleft}Verified trustworthy software systems{\textquoteright}.},
	issn = {1364-503X},
	URL = {http://rsta.royalsocietypublishing.org/content/375/2104/20160331},
	journal = {Philosophical Transactions of the Royal Society of London A: Mathematical, Physical and Engineering Sciences}
}

@book{quickchick,
  title = {QuickChick: Property-Based Testing in Coq},
  author = {Leonidas Lampropoulos and
            Benjamin C. Pierce},
  year = {2018},
  series = {Software Foundations series, volume 4},
  publisher = {Electronic textbook},
  url = {https://softwarefoundations.cis.upenn.edu/qc-current/index.html}
}

@misc{rfc7232,
	series =	{Request for Comments},
	number =	7232,
	howpublished =	{RFC 7232},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC7232},
	url =		{https://rfc-editor.org/rfc/rfc7232.txt},
        author =	{Roy T. Fielding and Julian Reschke},
	title =		{{Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests}},
	pagetotal =	28,
	year =		2014,
	month =		jun,
	abstract =	{The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems. This document defines HTTP/1.1 conditional requests, including metadata header fields for indicating state changes, request header fields for making preconditions on such state, and rules for constructing the responses to a conditional request when one or more preconditions evaluate to false.},
}
